name: Rust-Cargo Build

on:
  push:
    paths-ignore:
      - 'sites/**'
      - '.github/workflows/docs.yml'
  workflow_dispatch:
    inputs:
      version:
        description: Terracotta Version
        type: string

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  name: "terracotta"
  RUST_BACKTRACE: "full"

defaults:
  run:
    shell: "bash"

jobs:
  build-windows-x86_64:
    runs-on: windows-latest
    name: Build for Windows x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install GitHub Artifact Client
        uses: lhotari/gh-actions-artifact-client@v2
      - name: Compute Version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "TERRACOTTA_VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "TERRACOTTA_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi
      - name: Install 7z
        run: choco install 7zip
      - name: Build
        run: |
          rustup target add --toolchain nightly x86_64-pc-windows-msvc
          rustup component add rust-src --toolchain nightly-x86_64-pc-windows-msvc
          cargo +nightly build --release --target $(rustc --print host-tuple) \
            -Z build-std=core,std,alloc,proc_macro,panic_abort \
            -Z build-std-features=default,optimize_for_size
        env:
          RUSTFLAGS: -Zunstable-options -Cpanic=immediate-abort
      - name: Upload Artifact
        run: |
          source="terracotta-${TERRACOTTA_VERSION}-windows-x86_64.exe"
          cp "target/$(rustc --print host-tuple)/release/terracotta.exe" "$source"
          7z a "$source.zip" "$source"
          cat "$source.zip" | gh-actions-artifact-client.js upload "$source"
  build-windows-arm64:
    runs-on: windows-11-arm
    name: Build for Windows arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install GitHub Artifact Client
        uses: lhotari/gh-actions-artifact-client@v2
      - name: Compute Version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "TERRACOTTA_VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "TERRACOTTA_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi
      - name: Build
        run: |
          rustup target add --toolchain nightly aarch64-pc-windows-msvc
          rustup component add rust-src --toolchain nightly-aarch64-pc-windows-msvc
          cargo +nightly build --release --target $(rustc --print host-tuple) \
            -Z build-std=core,std,alloc,proc_macro,panic_abort \
            -Z build-std-features=default,optimize_for_size
        env:
          RUSTFLAGS: -Zunstable-options -Cpanic=immediate-abort
      - name: Install 7z
        run: choco install 7zip
      - name: Upload Artifact
        run: |
          source="terracotta-${TERRACOTTA_VERSION}-windows-arm64.exe"
          cp "target/$(rustc --print host-tuple)/release/terracotta.exe" "$source"
          7z a "$source.zip" "$source"
          cat "$source.zip" | gh-actions-artifact-client.js upload "$source"
  build-linux-x86_64:
    runs-on: ubuntu-24.04
    name: Build for Linux x86_64
    env:
      TARGET: x86_64-unknown-linux-musl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install GitHub Artifact Client
        uses: lhotari/gh-actions-artifact-client@v2
      - name: Install musl libc
        run: |
          sudo apt update
          sudo apt install --yes --no-install-recommends build-essential musl-tools musl-dev
      - name: Compute Version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "TERRACOTTA_VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "TERRACOTTA_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi
      - name: Build
        run: |
          rustup target add --toolchain nightly "$TARGET"
          rustup component add rust-src --toolchain "nightly-$TARGET"
          rustup component add rust-src --toolchain "nightly-$(rustc --print host-tuple)"
          cargo +nightly build --release --target "$TARGET" \
            -Z build-std=core,std,alloc,proc_macro,panic_abort \
            -Z build-std-features=default,optimize_for_size
        env:
          RUSTFLAGS: -Zunstable-options -Cpanic=immediate-abort
      - name: Upload Artifact
        run: |
          source="terracotta-${TERRACOTTA_VERSION}-linux-x86_64"
          
          cp "target/$TARGET/release/terracotta" "$source"
          chmod 755 "$source"
          tar -cf "$source.tar" "$source"
          zip -q - "$source.tar" | gh-actions-artifact-client.js upload "$source.tar"
  build-linux-arm64:
    runs-on: ubuntu-24.04-arm
    name: Build for Linux arm64
    env:
      TARGET: aarch64-unknown-linux-musl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install GitHub Artifact Client
        uses: lhotari/gh-actions-artifact-client@v2
      - name: Install musl libc
        run: |
          sudo apt update
          sudo apt install --yes --no-install-recommends build-essential musl-tools musl-dev
      - name: Compute Version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "TERRACOTTA_VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "TERRACOTTA_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi
      - name: Build
        run: |
          rustup target add --toolchain nightly "$TARGET"
          rustup component add rust-src --toolchain "nightly-$TARGET"
          rustup component add rust-src --toolchain "nightly-$(rustc --print host-tuple)"
          cargo +nightly build --release --target "$TARGET" \
            -Z build-std=core,std,alloc,proc_macro,panic_abort \
            -Z build-std-features=default,optimize_for_size
        env:
          RUSTFLAGS: -Zunstable-options -Cpanic=immediate-abort
      - name: Upload Artifact
        run: |
          source="terracotta-${TERRACOTTA_VERSION}-linux-arm64"
          
          cp "target/$TARGET/release/terracotta" "$source"
          chmod 755 "$source"
          tar -cf "$source.tar" "$source"
          zip -q - "$source.tar" | gh-actions-artifact-client.js upload "$source.tar"
  build-macos-x86_64:
    runs-on: macos-15-intel
    name: Build for MacOS x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install GitHub Artifact Client
        uses: lhotari/gh-actions-artifact-client@v2
      - name: Compute Version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "TERRACOTTA_VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "TERRACOTTA_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi
      - name: Build
        run: |
          rustup target add --toolchain nightly x86_64-apple-darwin
          rustup component add rust-src --toolchain nightly-x86_64-apple-darwin
          cargo +nightly build --release --target $(rustc --print host-tuple) \
            -Z build-std=core,std,alloc,proc_macro,panic_abort \
            -Z build-std-features=default,optimize_for_size
        env:
          RUSTFLAGS: -Zunstable-options -Cpanic=immediate-abort
      - name: Upload Artifact
        run: |
          source="terracotta-${TERRACOTTA_VERSION}-macos-x86_64"
          
          cp "target/$(rustc --print host-tuple)/release/terracotta" "$source"
          chmod 755 "$source"
          tar -cf "$source.tar" "$source"
          zip -q - "$source.tar" | gh-actions-artifact-client.js upload "$source.tar"
          
          chmod -R 755 build/macos/scripts
          TEMP_DIR=$(mktemp -d)
          mkdir -p "$TEMP_DIR"
          
          cp -R build/macos/terracotta.app "$TEMP_DIR"
          mkdir -p "$TEMP_DIR/terracotta.app/Contents/MacOS/"
          cp "target/$(rustc --print host-tuple)/release/terracotta" "$TEMP_DIR/terracotta.app/Contents/MacOS/terracotta"
          
          chmod -R 755 "$TEMP_DIR/"
          PKG_OUTPUT="$source.pkg"
          
          pkgbuild \
            --root "$TEMP_DIR" \
            --identifier "net.burningtnt.terracotta" \
            --version "1.0" \
            --install-location "/Applications" \
            --scripts build/macos/scripts \
            --component-plist build/macos/terracotta.plist \
            "$PKG_OUTPUT"
          zip -q - $PKG_OUTPUT | gh-actions-artifact-client.js upload "$source.pkg"
  build-macos-arm64:
    runs-on: macos-latest
    name: Build for MacOS arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install GitHub Artifact Client
        uses: lhotari/gh-actions-artifact-client@v2
      - name: Compute Version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "TERRACOTTA_VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "TERRACOTTA_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi
      - name: Build
        run: |
          rustup target add --toolchain nightly aarch64-apple-darwin
          rustup component add rust-src --toolchain nightly-aarch64-apple-darwin
          cargo +nightly build --release --target $(rustc --print host-tuple) \
            -Z build-std=core,std,alloc,proc_macro,panic_abort \
            -Z build-std-features=default,optimize_for_size
        env:
          RUSTFLAGS: -Zunstable-options -Cpanic=immediate-abort
      - name: Upload Artifact
        run: |
          source="terracotta-${TERRACOTTA_VERSION}-macos-arm64"
          
          cp "target/$(rustc --print host-tuple)/release/terracotta" "$source"
          chmod 755 "$source"
          tar -cf "$source.tar" "$source"
          zip -q - "$source.tar" | gh-actions-artifact-client.js upload "$source.tar"
          
          chmod -R 755 build/macos/scripts
          TEMP_DIR=$(mktemp -d)
          mkdir -p "$TEMP_DIR"
          
          cp -R build/macos/terracotta.app "$TEMP_DIR"
          mkdir -p "$TEMP_DIR/terracotta.app/Contents/MacOS/"
          cp "target/$(rustc --print host-tuple)/release/terracotta" "$TEMP_DIR/terracotta.app/Contents/MacOS/terracotta"
          
          chmod -R 755 "$TEMP_DIR/"
          PKG_OUTPUT="$source.pkg"
          
          pkgbuild \
            --root "$TEMP_DIR" \
            --identifier "net.burningtnt.terracotta" \
            --version "1.0" \
            --install-location "/Applications" \
            --scripts build/macos/scripts \
            --component-plist build/macos/terracotta.plist \
            "$PKG_OUTPUT"
          zip -q - $PKG_OUTPUT | gh-actions-artifact-client.js upload "$source.pkg"
  assemble-packages:
    runs-on: ubuntu-latest
    name: Assemble Artifact
    needs: [build-windows-x86_64, build-windows-arm64, build-linux-x86_64, build-linux-arm64, build-macos-x86_64, build-macos-arm64]
    steps:
      - name: Install GitHub Artifact Client
        uses: lhotari/gh-actions-artifact-client@v2
      - name: Install 7z
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full
      - name: Compute Version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "TERRACOTTA_VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "TERRACOTTA_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi
      - name: Assemble Artifacts
        run: |
          artifacts_direct=(
            "terracotta-${TERRACOTTA_VERSION}-windows-x86_64.exe"
            "terracotta-${TERRACOTTA_VERSION}-windows-arm64.exe"
            "terracotta-${TERRACOTTA_VERSION}-macos-x86_64.pkg"
            "terracotta-${TERRACOTTA_VERSION}-macos-arm64.pkg"
          )
          artifacts_tar=(
            "terracotta-${TERRACOTTA_VERSION}-linux-x86_64"
            "terracotta-${TERRACOTTA_VERSION}-linux-arm64"
            "terracotta-${TERRACOTTA_VERSION}-macos-x86_64"
            "terracotta-${TERRACOTTA_VERSION}-macos-arm64"
          )
          
          file=$(mktemp -t XXXXXX.zip)
          for artifact in "${artifacts_direct[@]}"; do
            gh-actions-artifact-client.js download "$artifact" > "$file"
            unzip -p "$file" > "$artifact"
          done
          for artifact in "${artifacts_tar[@]}"; do
            gh-actions-artifact-client.js download "$artifact.tar" > "$file"
            unzip -p "$file" | tar -xOf - > "$artifact"
          done
          rm "$file"
          
          chmod 755 terracotta-${TERRACOTTA_VERSION}-*
          7z -m0=LZMA2 -mx=9 -ms=on a terracotta.7z terracotta-${TERRACOTTA_VERSION}-*
          zip -r - terracotta.7z | gh-actions-artifact-client.js upload "terracotta-${TERRACOTTA_VERSION}-all.7z"
          
          if [ ! -z "${{ github.event.inputs.version }}" ]; then
            tar -czvf terracotta-${TERRACOTTA_VERSION}-windows-x86_64-pkg.tar.gz terracotta-${TERRACOTTA_VERSION}-windows-x86_64.exe
            tar -czvf terracotta-${TERRACOTTA_VERSION}-windows-arm64-pkg.tar.gz terracotta-${TERRACOTTA_VERSION}-windows-arm64.exe
            tar -czvf terracotta-${TERRACOTTA_VERSION}-linux-x86_64-pkg.tar.gz terracotta-${TERRACOTTA_VERSION}-linux-x86_64
            tar -czvf terracotta-${TERRACOTTA_VERSION}-linux-arm64-pkg.tar.gz terracotta-${TERRACOTTA_VERSION}-linux-arm64
          
            tar -czvf terracotta-${TERRACOTTA_VERSION}-macos-x86_64-pkg.tar.gz terracotta-${TERRACOTTA_VERSION}-macos-x86_64 terracotta-${TERRACOTTA_VERSION}-macos-x86_64.pkg
            tar -czvf terracotta-${TERRACOTTA_VERSION}-macos-arm64-pkg.tar.gz terracotta-${TERRACOTTA_VERSION}-macos-arm64 terracotta-${TERRACOTTA_VERSION}-macos-arm64.pkg
          
            gh release create v"${{ github.event.inputs.version }}" -R "${{ github.repository }}" --draft --generate-notes terracotta-${TERRACOTTA_VERSION}-*
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

