name: Rust-Cargo Build

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  name: "terracotta"
  MACOSX_DEPLOYMENT_TARGET: "11.1"
  RUST_BACKTRACE: "full"
  targets: >-
    x86_64-pc-windows-gnullvm
    aarch64-pc-windows-gnullvm
    x86_64-unknown-linux-gnu
    aarch64-unknown-linux-gnu
    x86_64-unknown-linux-musl
    aarch64-unknown-linux-musl
    x86_64-apple-darwin
    aarch64-apple-darwin

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    name: Build All
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Cross Compilers (General)
      run: |
        sudo apt update
        sudo apt install --yes --no-install-recommends build-essential \
          gcc-x86-64-linux-gnu g++-x86-64-linux-gnu \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu \
          musl-tools musl-dev \
          mingw-w64
        
        if [ ! -f "target/llvm-mingw/flag" ]; then
          mkdir -p target/
          wget -O target/.llvm-mingw.tar.xz https://github.com/mstorsjo/llvm-mingw/releases/download/20250709/llvm-mingw-20250709-ucrt-ubuntu-22.04-x86_64.tar.xz
          tar -xf target/.llvm-mingw.tar.xz -C target
          sudo rm -r -f target/llvm-mingw
          mv -v -f target/llvm-mingw-* target/llvm-mingw
          chmod +x target/llvm-mingw/bin/*

          touch target/llvm-mingw/flag
        fi
    - name: Install Cross Compliers (MacOS)
      uses: 8Mi-Tech/setup-osx-cross@6b7954cec12f774c2ff02b2a7596ec6791a39ed5
      with:
        osx-version: "${{ env.MACOSX_DEPLOYMENT_TARGET }}"
    - name: Install Cross Compliers (Linux ARM64 MUSL)
      uses: Lesmiscore/musl-cross-compilers@master
      with:
        target: "aarch64-linux-musl"
    - name: Install Rustup
      run: |
        if ! command -v cargo &> /dev/null; then
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly-x86_64-unknown-linux-gnu
          echo PATH=$PATH:$HOME/.cargo/bin >> $GITHUB_ENV
        fi
    - name: Install Rust Toolchains
      run: |
        rustup target add --toolchain nightly $(echo "$targets" | tr '\n' ' ')
    - name: Build All
      id: build
      env:
        CARGO_TARGET_X86_64_PC_WINDOWS_GNULLVM_LINKER: "target/llvm-mingw/bin/x86_64-w64-mingw32-clang"
        CARGO_TARGET_X86_64_PC_WINDOWS_GNULLVM_AR: "target/llvm-mingw/bin/x86_64-w64-mingw32-ar"
        CARGO_TARGET_X86_64_PC_WINDOWS_GNULLVM_WINDRES_PATH: "target/llvm-mingw/bin/x86_64-w64-mingw32-windres"

        CARGO_TARGET_AARCH64_PC_WINDOWS_GNULLVM_LINKER: "target/llvm-mingw/bin/aarch64-w64-mingw32-clang"
        CARGO_TARGET_AARCH64_PC_WINDOWS_GNULLVM_AR: "target/llvm-mingw/bin/aarch64-w64-mingw32-ar"
        CARGO_TARGET_AARCH64_PC_WINDOWS_GNULLVM_WINDRES_PATH: "target/llvm-mingw/bin/aarch64-w64-mingw32-windres"

        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR: aarch64-linux-gnu-ar

        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-musl-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_AR: aarch64-linux-musl-ar
      run: |
        mkdir -p .cargo
        cp -f build/config.toml .cargo/config.toml
        cargo +nightly build --release --target $(echo $(echo "$targets" | tr '\n' ' ') | sed 's/ / --target /g')
        rm -r -f .cargo
    - name: Assemble Artifact
      run: cargo run -p assemble
      env:
        TERRACOTTA_ARTIFACT: target/terracotta
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terracotta
        path: target/terracotta
