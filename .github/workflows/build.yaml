name: Rust-Cargo Build

on:
  push:
    paths-ignore:
      - 'sites/**'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  name: "terracotta"
  MACOSX_DEPLOYMENT_TARGET: "11.1"
  RUST_BACKTRACE: "full"
  targets: >-
    x86_64-pc-windows-gnullvm
    aarch64-pc-windows-gnullvm
    x86_64-unknown-linux-gnu
    aarch64-unknown-linux-gnu
    x86_64-apple-darwin
    aarch64-apple-darwin

jobs:
  build-executable:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    name: Build Executable
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Cross Compilers (General)
      run: |
        sudo apt update
        sudo apt install --yes --no-install-recommends build-essential llvm-18 clang-18
    - name: Install Cross Compliers (MacOS)
      uses: 8Mi-Tech/setup-osx-cross@6b7954cec12f774c2ff02b2a7596ec6791a39ed5
      with:
        osx-version: "${{ env.MACOSX_DEPLOYMENT_TARGET }}"
    - name: Config Cross Compilers
      run: |
        mkdir -p target/bin
        echo -e '#!/usr/bin/bash\nexec /usr/bin/llvm-windres-18 --target=aarch64-w64-mingw32 "$@"' > target/bin/llvm-windres-aarch64-w64-mingw32.sh
        chmod +x target/bin/llvm-windres-aarch64-w64-mingw32.sh
    - name: Install Zig
      uses: mlugg/setup-zig@v2
    - name: Install Rustup
      run: |
        if ! command -v cargo &> /dev/null; then
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly-x86_64-unknown-linux-gnu
          echo PATH=$PATH:$HOME/.cargo/bin >> $GITHUB_ENV
        fi
    - name: Generate Cache Key
      run: cargo generate-lockfile
    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          .easytier
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Install Cargo-Zigbuild
      uses: taiki-e/cache-cargo-install-action@v2
      with:
        tool: cargo-zigbuild
    - name: Install Cargo-Packager
      uses: taiki-e/cache-cargo-install-action@v2
      with:
        tool: cargo-packager
    - name: Install Rust Toolchains
      run: |
        rustup target add --toolchain nightly $(echo "$targets" | tr '\n' ' ')
    - name: Build All
      id: build
      env:
        CARGO_TARGET_X86_64_PC_WINDOWS_GNULLVM_WINDRES_PATH: "/usr/bin/llvm-windres-18"
        CARGO_TARGET_X86_64_PC_WINDOWS_GNULLVM_AR: "/usr/bin/llvm-ar-18"
        CARGO_TARGET_AARCH64_PC_WINDOWS_GNULLVM_WINDRES_PATH: "target/bin/llvm-windres-aarch64-w64-mingw32.sh"
        CARGO_TARGET_AARCH64_PC_WINDOWS_GNULLVM_AR: "/usr/bin/llvm-ar-18"
      run: |
        mkdir -p .cargo
        cp -f build/config.toml .cargo/config.toml
        cargo +nightly zigbuild --release --target $(echo $(echo "$targets" | tr '\n' ' ') | sed 's/ / --target /g' | sed 's/-linux-gnu/-linux-gnu.2.17/g' )
        rm -r -f .cargo
    - name: Assemble Artifact
      run: cargo run -p assemble
      env:
        TERRACOTTA_ARTIFACT: target/terracotta
    - name: Create AppImage
      run: |       
        cargo +nightly packager --release -f appimage --target x86_64-unknown-linux-gnu
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terracotta-build
        path: target/terracotta

  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-24.04-arm
    needs: build-executable
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Restore Artifact
      uses: actions/download-artifact@v4
      with:
        name: terracotta-build
        path: artifacts
    - name: Install Rustup
      run: |
        if ! command -v cargo &> /dev/null; then
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly-x86_64-unknown-linux-gnu
          echo PATH=$PATH:$HOME/.cargo/bin >> $GITHUB_ENV
        fi
    - name: Install Cargo-Packager
      uses: taiki-e/cache-cargo-install-action@v2
      with:
        tool: cargo-packager
    - name: Install Rust Toolchains
      run: |
        rustup target add --toolchain nightly aarch64-unknown-linux-gnu
    - name: Install GitHub Actions Artifact Client
      uses: lhotari/gh-actions-artifact-client@v2
    - name: Create AppImage
      run: |       
        mkdir -p target/aarch64-unknown-linux-gnu/release
        if [ -f artifacts/$(ls artifacts | grep "linux-aarch64-gnu.tar") ]; then
          tar -vxf artifacts/$(ls artifacts | grep "linux-aarch64-gnu.tar") -C artifacts
          rm artifacts/$(ls artifacts | grep "linux-aarch64-gnu.tar")
        fi
        mv -v artifacts/$(ls artifacts | grep "linux-aarch64-gnu") target/aarch64-unknown-linux-gnu/release/terracotta
        cargo +nightly packager --release -f appimage --target aarch64-unknown-linux-gnu
        {
          cd target/terracotta
          zip -q - $(ls | grep "_aarch64.AppImage") | gh-actions-artifact-client.js upload $(ls | grep "_aarch64.AppImage")
        }

  assemble-dmg:
    name: Assemble DMG
    runs-on: macos-latest
    needs: build-executable
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Restore Artifact
      uses: actions/download-artifact@v4
      with:
        name: terracotta-build
        path: inputs
    - name: Install Dependencies
      uses: lhotari/gh-actions-artifact-client@v2
    - name: Transform Artifact
      run: |
        TEMP_DIR=$(mktemp -d)
        cp -R inputs/* "$TEMP_DIR"

        mkdir artifacts
        cd artifacts

        IFS=$'\n'
        APP_FOLDERS=($(find "$TEMP_DIR" -type d -name "*.app"))
        unset IFS

        for APP_FOLDER in "${APP_FOLDERS[@]}"; do

          PKG_ROOT=$(mktemp -d)
          mkdir -p "$PKG_ROOT/Applications"
          cp -R "$APP_FOLDER" "$PKG_ROOT/Applications/"
          chmod -R 777 "$PKG_ROOT/"

          APP_NAME=($(dirname "$APP_FOLDER"))
          APP_NAME=($(basename "$APP_NAME"))
          PKG_NAME="${APP_NAME}.pkg"
          echo "Creating package: folder=${PKG_ROOT}, pkg=${PKG_NAME}"

          pkgbuild \
            --root "$PKG_ROOT" \
            --identifier "net.burningtnt.terracotta" \
            --version "1.0" \
            --install-location "/" \
            "$PKG_NAME"
          rm -rf "$PKG_ROOT"
          rm -rf "$APP_FOLDER"
        done

        find "$TEMP_DIR" -mindepth 1 -maxdepth 1 -exec mv {} . \;
        rm -rf "$TEMP_DIR"

        ls -R
        
        IFS=$'\n'
        ARTIFACTS=($(find . -mindepth 1 -maxdepth 1 -type f))
        unset IFS
        for ARTIFACT in "${ARTIFACTS[@]}"; do
          zip -q - "$ARTIFACT" | gh-actions-artifact-client.js upload $(basename "$ARTIFACT")
        done

        cd ..
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terracotta-build-all
        path: artifacts
